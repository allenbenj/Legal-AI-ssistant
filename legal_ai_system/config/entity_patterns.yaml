# Regex patterns for entity extraction.
# Each top-level key is an EntityType label from ontology.py.
# 'pattern': The regex pattern.
# 'attributes': (Optional) List of attribute names for unnamed capture groups. Group 1 maps to first attr, etc.
#               If only one attribute and no groups, full match maps to it.
# 'attributes_map': (Optional) Maps named capture groups (e.g., '(?P<name>...)') to entity attribute names.
#                   This takes precedence over 'attributes'.
# 'context_keywords': (Optional) Keywords to boost confidence if found near the match.

Person:
  - pattern: '\b([A-Z][a-z]+ [A-Z][a-z]+(?:(?:\s|-)[A-Z][a-z]+){0,2})\b(?!\s*(?:LLC|Inc|Corp|Ltd|Co\.|Company|Bank))' # Avoid company names
    attributes: ["name"]
    context_keywords: ["defendant", "plaintiff", "witness", "attorney", "counsel", "mr.", "ms.", "mrs.", "dr."]
  - pattern: '(?i)(?:mr\.?|ms\.?|mrs\.?|dr\.?)\s+([A-Z][a-z]+(?: [A-Z][a-z]+)*)'
    attributes: ["name"]
    context_keywords: ["stated", "testified", "argued"]

Judge:
  - pattern: '(?i)(?:The Honorable|Honorable|Hon\.?|Judge|Justice)\s+([A-Z][a-z]+(?:\s+[A-Z][a-z]+){1,3})'
    attributes: ["name"]
    context_keywords: ["presiding", "ruled", "ordered", "court", "bench"]

Prosecutor:
  - pattern: '(?i)(?:District Attorney|D\.A\.?|State Attorney|U\.S\. Attorney|Assistant U\.S\. Attorney)\s+([A-Z][a-z]+(?:\s+[A-Z][a-z]+){1,2})'
    attributes: ["name"]
    context_keywords: ["prosecution", "government", "charged", "indicted"]
  - pattern: '(?P<name>[A-Z][a-z]+ [A-Z][a-z]+),\s+Esquire,\s+representing the People' # More specific example
    attributes_map:
        name: "name"
    context_keywords: ["people", "state", "prosecution"]

DefenseCounsel:
  - pattern: '(?i)(?:Attorney for the Defendant|Defense Counsel|Counsel for Mr\.\s+[A-Za-z]+)\s+([A-Z][a-z]+(?:\s+[A-Z][a-z]+){1,2})'
    attributes: ["name"]
    context_keywords: ["defense", "defendant", "client", "representing"]
  - pattern: '(?P<name>[A-Z][a-z]+ [A-Z][a-z]+)\s+of\s+(?P<firm_name>[A-Z][A-Za-z\s,&]+(?:LLP|LLC|P\.C\.?|Group))'
    attributes_map:
        name: "name"
        firm_name: "firm"
    context_keywords: ["defense", "attorney"]

Case:
  - pattern: '(?i)(?:Case\s+No\.?|Docket\s+No\.?|Index\s+No\.?)\s*([A-Z0-9:\-_]+(?:cv|cr)[A-Z0-9:\-_]*)'
    attributes: ["case_number"]
    context_keywords: ["court", "filed", "proceeding"]
  - pattern: '(?i)\b([A-Z][A-Za-z\s]+)\s+v\.?(?:\s+and\s+through\s+her\s+next\s+friend\s+[A-Za-z\s]+,)?\s+([A-Z][A-Za-z\s,]+(?:Inc\.|Corp\.|LLC)?)\b'
    # This pattern captures 'Plaintiff v. Defendant' style case titles.
    # It's complex to map directly to 'case_title' attribute with regex only.
    # For simplicity, we'll take the full match as title. LLM is better for structured parsing of titles.
    attributes: ["case_title"]
    context_keywords: ["versus", "against", "plaintiff", "defendant", "in re"]

LegalDocument:
  - pattern: '(?i)\b(Motion\s+to\s+[A-Za-z]+|Order\s+Granting\s+[A-Za-z]+|Complaint|Petition\s+for\s+[A-Za-z]+|Brief\s+in\s+Support|Affidavit\s+of\s+[A-Za-z\s]+|Summons|Subpoena|Writ\s+of\s+[A-Za-z]+)\b'
    attributes: ["title"] # The specific type of document
    context_keywords: ["filed", "submitted", "issued", "served", "dated"]

Court:
  - pattern: '(?i)(?:Supreme\s+Court\s+of\s+[A-Za-z\s]+|United\s+States\s+District\s+Court\s+for\s+the\s+[A-Za-z\s]+District\s+of\s+[A-Za-z\s]+|[A-Za-z\s]+County\s+Superior\s+Court|Court\s+of\s+Appeals\s+for\s+the\s+[A-Za-z\s]+Circuit)'
    attributes: ["court_name"]
    context_keywords: ["jurisdiction", "presided", "filed in"]

DateEntity: # For 'DateEntity' from ontology.py
  - pattern: '\b((?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\s+\d{1,2},?\s+\d{4})\b' # Month D, YYYY
    attributes: ["original_text_mention"]
    context_keywords: ["on", "dated", "filed", "occurred", "effective"]
  - pattern: '\b(\d{1,2}/\d{1,2}/\d{2,4})\b' # MM/DD/YYYY or M/D/YY
    attributes: ["original_text_mention"]
    context_keywords: ["on", "dated", "effective"]
  - pattern: '\b(\d{4}-\d{2}-\d{2})\b' # YYYY-MM-DD
    attributes: ["original_text_mention"]
    context_keywords: ["on", "dated", "effective"]

MonetaryAmount: # For 'MonetaryAmount' from ontology.py
  - pattern: '(?i)(?:\$|USD|EUR|GBP)\s*(\d{1,3}(?:,\d{3})*(?:\.\d{2})?|\d+(?:\.\d{2})?)\s*(?:million|billion|thousand)?'
    # This captures the numeric part. Post-processing needed for currency and magnitude.
    attributes: ["amount_value"] # This would be the string like "1,200.50" or "50 million"
    context_keywords: ["fine", "damages", "settlement", "payment", "award", "fee"]

Statute:
  - pattern: '\b(\d{1,2}\s+U\.S\.C\.\s+ยง\s*\d+[A-Za-z]?\(?[A-Za-z0-9]*\)?)\b' # e.g., 18 U.S.C. ยง 1001
    attributes: ["citation_number"]
    context_keywords: ["violating", "pursuant to", "under", "statute"]
  - pattern: '\b([A-Za-z\s]+Act\s+of\s+\d{4})\b' # e.g., Securities Exchange Act of 1934
    attributes: ["statute_name"]
    context_keywords: ["law", "act", "legislation"]